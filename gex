#!/usr/bin/env ruby
# frozen_string_literal: true

# Rings of Power Graphics Extractor

$LOAD_PATH.unshift("#{File.dirname(__FILE__)}/lib")

require 'layoutable'
require 'bmp_writer'
require_relative 'romlayout'

ROM = RingsOfPower.apply_to(File.binread(ARGV.shift))

def convert_palette(sega_cram_entries)
  sega_cram_entries.map do |c|
    rgba = [c[8..11], c[4..7], c[0..3], c[12..15]]
    rgba.map { |ch| ch * 0x12 }
  end
end

def restripe(data, pw)
  patternlines = data.unpack('V*')
  scanlines = patternlines.each_slice(8*pw).map do |block|
    patterns = block.each_slice(8).to_a
    patterns.transpose
  end

  scanlines.flatten.pack('V*')
end

case ARGV.shift
when '-p'
  filenum = ARGV.shift.to_i
  entry = ROM[:portrait_directory][filenum]

  warn "Type #{type} isn't recognised, this could go un-well!" unless entry[:type] == 1

  file = ROM[:portrait_files][entry[:offset]]

  bmp_palette = convert_palette(file.values_at(*(0..15).to_a))
  bmp_data = restripe(file[:pixels], 6)

  bmp = BMPWriter.new("portrait-#{filenum}.bmp")
  bmp.write(48, 48, bmp_palette, bmp_data)

  histogram = bmp_data.unpack1('H*').chars.group_by(&:itself).transform_values(&:length)
  histogram.sort.each do |k,v|
    i = k.to_i(16)
    warn "%2d (0x%04x): %d entries" % [i, file[i], v]
  end

  warn "#{histogram.count} used colours"
  warn "#{histogram.values.sum} pixels"
end
