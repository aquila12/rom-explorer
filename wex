#!/usr/bin/env ruby
# frozen_string_literal: true

# Rings of Power word extractor

$LOAD_PATH.unshift("#{File.dirname(__FILE__)}/lib")

require 'layoutable'
require_relative 'romlayout'

ROM = RingsOfPower.apply_to(File.binread(ARGV.shift))

PUNCTUATION = ' ,.?'

ROM[:dictionary_index].load_all
OFFSETS = ROM[:dictionary_index].each_cons(2).map { |a, b| a...b }

def word(word_punc)
  w = word_punc[0..13] - 1
  p = word_punc[14..15]
  word = ROM[:dictionary][OFFSETS[w]]
  punc = PUNCTUATION[p]
  ['\0', punc].include?(word) ? word : "#{word}#{punc}"
end

def wordstring(start, length)
  range = start...(start + length)
  wvector = ROM[:paragraph_wordlists][range]
  wvector = [wvector] unless wvector.is_a? Array
  words = wvector.map(&method(:word))
  words.join
end

def paragraph(entry)
  # NB: Start fixup based on assembly
  # This breaks the first entry, "An unknown building.", like in the game
  wordstring 2 + entry[:offset], entry[:length]
end

case ARGV.shift
when nil
  puts(OFFSETS.map { |r| ROM[:dictionary][r] })
when '-w'
  puts word(ARGV.shift.to_i)
when '-d'
  wvector = [ARGV.shift].pack('H*').unpack('n*')
  words = wvector.map(&method(:word))
  puts words.join
when '-a'
  start = ARGV.shift.to_i(16)
  length = ARGV.shift.to_i
  puts wordstring(start, length)
when '-e'
  puts ROM[:paragraph_directory][ARGV.shift.to_i]
when '-t'
  entry = ROM[:paragraph_directory][ARGV.shift.to_i]
  puts paragraph(entry)
when '--dump'
  ROM[:paragraph_directory].load_all
  ROM[:paragraph_directory].each_with_index do |e, i|
    puts "#{i}\t#{paragraph(e)}"
  end
end
