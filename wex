#!/usr/bin/env ruby
# Rings of Power word extractor

CHARS = 0xd6eba..0xdc0bf  # ROM Address where character data lives
OFFSETS = 0xdc0c2..0xddbd8 # ROM Address where word offset data lives
TABLE = 0xddbd8	# ROM Address where string table data lives
STRINGS = 0xe0a18 # ROM Address where words data lives
PUNC_LUT = {
  0x0000 => ' ',
  0x4000 => ',',
  0x8000 => '.',
  0xc000 => '?'
}

filename = ARGV.shift
ROM = File.open(filename, 'rb') { |f| f.read }.freeze

def load_words
  chars = ROM[CHARS]
  offsets = ROM[OFFSETS].unpack('n*')

  offsets.each_cons(2).map { |a,b| chars[a..b-1] }
end

WORDS = load_words.freeze

def lookup(index_array)
  index_array.map do |i|
    word_number = i & 0x3fff
    punc = PUNC_LUT[i & 0xc000]
    word = WORDS[word_number - 1]
    ['\0', punc].include?(word) ? word : word + punc
  end.join
end

def lookup_indirect(address, count)
  address += 2 # Fixup based on disassembly
  count -= 1 # Fixup based on disassembly
  format = 'n' * count
  lookup ROM[address..].unpack(format)
end

def table(table_index)
  offset = TABLE + 10 * table_index
  entry = ROM[offset..offset + 9]
  start, field = entry.unpack('NN')
  [STRINGS + start, (field >> 1) + 1]
end

case ARGV.shift
when nil
  puts WORDS
when '-w'
  puts WORDS[ARGV.shift.to_i - 1]
when '-d'
  wvector = [ARGV.shift].pack('H*').unpack('n*')
  puts lookup(wvector)
when '-a'
  start = ARGV.shift.to_i(16)
  count = ARGV.shift.to_i
  puts lookup_indirect(start, count)
when '-t'
  puts lookup_indirect(*table(ARGV.shift.to_i))
when '--dump'
  (0..Float::INFINITY).each do |n|
    start, count = table(n)
    break if count < 1
    break if count > 50
    puts "#{n}\t#{lookup_indirect(start, count)}"
  end  
end
